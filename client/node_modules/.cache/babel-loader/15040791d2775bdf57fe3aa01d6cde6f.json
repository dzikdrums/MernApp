{"ast":null,"code":"import Axios from 'axios';\nimport { API_URL } from 'config';\nimport { BASE_URL } from 'config';\n/* action name creator */\n\nconst reducerName = 'posts';\n\nconst createActionName = name => `app/${reducerName}/${name}`;\n/* selectors */\n\n\nexport const getAll = ({\n  posts\n}) => posts.data;\n/* action types */\n\nconst FETCH_START = createActionName('FETCH_START');\nconst FETCH_SUCCESS = createActionName('FETCH_SUCCESS');\nconst FETCH_ERROR = createActionName('FETCH_ERROR');\nconst ADD_POST = createActionName('ADD_POST');\n/* action creators */\n\nexport const fetchStarted = payload => ({\n  payload,\n  type: FETCH_START\n});\nexport const fetchSuccess = payload => ({\n  payload,\n  type: FETCH_SUCCESS\n});\nexport const fetchError = payload => ({\n  payload,\n  type: FETCH_ERROR\n});\nexport const addPostAction = payload => ({\n  payload,\n  type: ADD_POST\n});\n/* thunk creators */\n\nexport const fetchPublished = () => {\n  return (dispatch, getState) => {\n    dispatch(fetchStarted());\n    Axios.get('http://localhost:8000/api/posts').then(res => {\n      dispatch(fetchSuccess(res.data));\n    }).catch(err => {\n      dispatch(fetchError(err.message || true));\n    });\n  };\n};\n/* reducer */\n\nexport const reducer = (statePart = [], action = {}) => {\n  switch (action.type) {\n    case FETCH_START:\n      {\n        return { ...statePart,\n          loading: {\n            active: true,\n            error: false\n          }\n        };\n      }\n\n    case ADD_POST:\n      {\n        console.log(action);\n        return { ...statePart,\n          data: [...statePart.data, action.payload]\n        };\n      }\n\n    case FETCH_SUCCESS:\n      {\n        return { ...statePart,\n          loading: {\n            active: false,\n            error: false\n          },\n          data: action.payload\n        };\n      }\n\n    case FETCH_ERROR:\n      {\n        return { ...statePart,\n          loading: {\n            active: false,\n            error: action.payload\n          }\n        };\n      }\n\n    default:\n      return statePart;\n  }\n};","map":{"version":3,"sources":["/Users/macus/Desktop/MERNapp/src/redux/postsRedux.js"],"names":["Axios","API_URL","BASE_URL","reducerName","createActionName","name","getAll","posts","data","FETCH_START","FETCH_SUCCESS","FETCH_ERROR","ADD_POST","fetchStarted","payload","type","fetchSuccess","fetchError","addPostAction","fetchPublished","dispatch","getState","get","then","res","catch","err","message","reducer","statePart","action","loading","active","error","console","log"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport { API_URL } from 'config';\nimport { BASE_URL } from 'config';\n\n/* action name creator */\nconst reducerName = 'posts';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* selectors */\nexport const getAll = ({ posts }) => posts.data;\n\n/* action types */\nconst FETCH_START = createActionName('FETCH_START');\nconst FETCH_SUCCESS = createActionName('FETCH_SUCCESS');\nconst FETCH_ERROR = createActionName('FETCH_ERROR');\n\nconst ADD_POST = createActionName('ADD_POST');\n\n/* action creators */\nexport const fetchStarted = payload => ({ payload, type: FETCH_START });\nexport const fetchSuccess = payload => ({ payload, type: FETCH_SUCCESS });\nexport const fetchError = payload => ({ payload, type: FETCH_ERROR });\n\nexport const addPostAction = payload => ({ payload, type: ADD_POST });\n\n/* thunk creators */\nexport const fetchPublished = () => {\n  return (dispatch, getState) => {\n    dispatch(fetchStarted());\n\n    Axios.get('http://localhost:8000/api/posts')\n      .then(res => {\n        dispatch(fetchSuccess(res.data));\n      })\n      .catch(err => {\n        dispatch(fetchError(err.message || true));\n      });\n  };\n};\n\n/* reducer */\nexport const reducer = (statePart = [], action = {}) => {\n  switch (action.type) {\n    case FETCH_START: {\n      return {\n        ...statePart,\n        loading: {\n          active: true,\n          error: false,\n        },\n      };\n    }\n    case ADD_POST: {\n      console.log(action);\n      return {\n        ...statePart,\n        data: [...statePart.data, action.payload],\n      };\n    }\n    case FETCH_SUCCESS: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: false,\n        },\n        data: action.payload,\n      };\n    }\n    case FETCH_ERROR: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: action.payload,\n        },\n      };\n    }\n    default:\n      return statePart;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}