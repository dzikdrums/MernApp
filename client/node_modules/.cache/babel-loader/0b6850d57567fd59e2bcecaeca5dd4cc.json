{"ast":null,"code":"import Axios from 'axios';\nimport { API_URL } from 'config';\nimport { BASE_URL } from 'config';\n/* action name creator */\n\nconst reducerName = 'posts';\n\nconst createActionName = name => `app/${reducerName}/${name}`;\n/* SELECTORS */\n\n\nexport const getPosts = ({\n  posts\n}) => posts.data;\nexport const getSinglePost = ({\n  post\n}) => posts.singlePost;\nexport const getRequest = ({\n  posts\n}) => posts.request;\n/* ACTIONS */\n\nexport const LOAD_POSTS = createActionName('LOAD_POSTS');\nexport const LOAD_SINGLE_POST = createActionName('LOAD_SINGLE_POST');\nexport const START_REQUEST = createActionName('START_REQUEST');\nexport const END_REQUEST = createActionName('END_REQUEST');\nexport const ERROR_REQUEST = createActionName('ERROR_REQUEST');\n/* ACTION CREATORS */\n\nexport const loadPost = payload => ({\n  payload,\n  type: LOAD_POSTS\n});\nexport const loadSinglePost = payload => ({\n  payload,\n  type: LOAD_SINGLE_POST\n});\nexport const startRequest = () => ({\n  type: START_REQUEST\n});\nexport const endRequest = () => ({\n  type: END_REQUEST\n});\nexport const errorRequest = error => ({\n  error,\n  type: ERROR_REQUEST\n});\n/* INITIAL STATE */\n\nconst initialState = {\n  data: [],\n  request: {\n    pending: false,\n    error: null,\n    success: null\n  },\n  singlePost: []\n};\n/* REDUCER */\n\nexport default function reducer(statePart = initialState, action = {}) {\n  switch (action.type) {\n    case LOAD_POSTS:\n      {\n        return { ...statePart,\n          data: action.payload\n        };\n      }\n\n    case LOAD_SINGLE_POST:\n      {\n        return { ...statePart,\n          singlePost: action.payload\n        };\n      }\n\n    case START_REQUEST:\n      {\n        return { ...statePart,\n          request: {\n            pending: true,\n            error: null,\n            success: null\n          }\n        };\n      }\n\n    case END_REQUEST:\n      {\n        return { ...statePart,\n          request: {\n            pending: false,\n            error: null,\n            success: true\n          }\n        };\n      }\n\n    case ERROR_REQUEST:\n      {\n        return { ...statePart,\n          request: {\n            pending: false,\n            error: action.error,\n            success: false\n          }\n        };\n      }\n\n    default:\n      return statePart;\n  }\n}\n/* THUNKS */\n\nexport const loadPostsRequest = () => {\n  return async dispatch => {\n    dispatch(startReauest());\n\n    try {\n      let res = await Axios.get(`${BASE_URL}${API_URL}/posts`);\n      dispatch(loadPosts(res.data));\n      dispatch(endRequest());\n    } catch (e) {\n      dispatch(errorRequest(e.message));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/macus/Desktop/MERNapp/src/redux/postsRedux.js"],"names":["Axios","API_URL","BASE_URL","reducerName","createActionName","name","getPosts","posts","data","getSinglePost","post","singlePost","getRequest","request","LOAD_POSTS","LOAD_SINGLE_POST","START_REQUEST","END_REQUEST","ERROR_REQUEST","loadPost","payload","type","loadSinglePost","startRequest","endRequest","errorRequest","error","initialState","pending","success","reducer","statePart","action","loadPostsRequest","dispatch","startReauest","res","get","loadPosts","e","message"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport { API_URL } from 'config';\nimport { BASE_URL } from 'config';\n\n/* action name creator */\nconst reducerName = 'posts';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* SELECTORS */\n\nexport const getPosts = ({ posts }) => posts.data;\nexport const getSinglePost = ({ post }) => posts.singlePost;\nexport const getRequest = ({ posts }) => posts.request;\n\n/* ACTIONS */\n\nexport const LOAD_POSTS = createActionName('LOAD_POSTS');\nexport const LOAD_SINGLE_POST = createActionName('LOAD_SINGLE_POST');\nexport const START_REQUEST = createActionName('START_REQUEST');\nexport const END_REQUEST = createActionName('END_REQUEST');\nexport const ERROR_REQUEST = createActionName('ERROR_REQUEST');\n\n/* ACTION CREATORS */\n\nexport const loadPost = payload => ({ payload, type: LOAD_POSTS });\nexport const loadSinglePost = payload => ({ payload, type: LOAD_SINGLE_POST });\nexport const startRequest = () => ({ type: START_REQUEST });\nexport const endRequest = () => ({ type: END_REQUEST });\nexport const errorRequest = error => ({ error, type: ERROR_REQUEST });\n\n/* INITIAL STATE */\n\nconst initialState = {\n  data: [],\n  request: {\n    pending: false,\n    error: null,\n    success: null,\n  },\n  singlePost: [],\n};\n\n/* REDUCER */\n\nexport default function reducer(statePart = initialState, action = {}) {\n  switch (action.type) {\n    case LOAD_POSTS: {\n      return {\n        ...statePart,\n        data: action.payload,\n      };\n    }\n    case LOAD_SINGLE_POST: {\n      return {\n        ...statePart,\n        singlePost: action.payload,\n      };\n    }\n    case START_REQUEST: {\n      return {\n        ...statePart,\n        request: {\n          pending: true,\n          error: null,\n          success: null,\n        },\n      };\n    }\n    case END_REQUEST: {\n      return {\n        ...statePart,\n        request: {\n          pending: false,\n          error: null,\n          success: true,\n        },\n      };\n    }\n    case ERROR_REQUEST: {\n      return {\n        ...statePart,\n        request: {\n          pending: false,\n          error: action.error,\n          success: false,\n        },\n      };\n    }\n    default:\n      return statePart;\n  }\n}\n\n/* THUNKS */\n\nexport const loadPostsRequest = () => {\n  return async dispatch => {\n    dispatch(startReauest());\n    try {\n      let res = await Axios.get(`${BASE_URL}${API_URL}/posts`);\n      dispatch(loadPosts(res.data));\n      dispatch(endRequest());\n    } catch (e) {\n      dispatch(errorRequest(e.message));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}